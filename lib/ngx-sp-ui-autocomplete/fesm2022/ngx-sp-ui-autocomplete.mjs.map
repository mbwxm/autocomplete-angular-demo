{"version":3,"file":"ngx-sp-ui-autocomplete.mjs","sources":["../../../projects/ngx-sp-ui-autocomplete/src/lib/ngx-sp-ui-autocomplete.component.ts","../../../projects/ngx-sp-ui-autocomplete/src/lib/ngx-sp-ui-autocomplete.component.html","../../../projects/ngx-sp-ui-autocomplete/src/public-api.ts","../../../projects/ngx-sp-ui-autocomplete/src/ngx-sp-ui-autocomplete.ts"],"sourcesContent":["import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';\r\nimport { AutocompleteItem } from './types';\r\n\r\n@Component({\r\n  selector: 'ngx-sp-ui-autocomplete',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './ngx-sp-ui-autocomplete.component.html',\r\n  styleUrl: './ngx-sp-ui-autocomplete.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AutocompleteComponent implements AfterViewInit {\r\n\r\n  readonly KEY_PRESS_EVENTS = {\r\n    ARROW_UP: 'ArrowUp',\r\n    ARROW_DOWN: 'ArrowDown',\r\n    ENTER: 'Enter',\r\n  } as const;\r\n\r\n  @ViewChild('autocompleteinput') public autoCompleteInput: ElementRef;\r\n  /** The search items for the auto complete to search on */\r\n  @Input() public searchItems: AutocompleteItem[];\r\n\r\n  /** The name of the item which are being searched */\r\n  @Input() public autoCompleteItemName: string;\r\n\r\n  /** The display text in the placeholder of the text input */\r\n  @Input() public autoCompleteItemPlaceholder: string;\r\n\r\n  /** Optional function to be called when the User selects an item from the autocomplete, the item\r\n   * value is returned as a string */\r\n  @Output() public autoCompleteSelected = new EventEmitter<string>();\r\n\r\n  constructor(public renderer: Renderer2) { }\r\n\r\n  public ngAfterViewInit(): void {\r\n    // TODO: Improve UX by handling common key press events when the search items list is open\r\n    this.renderer.listen(this.autoCompleteInput.nativeElement, 'keydown', (keydownEvent: KeyboardEvent) => {\r\n      switch(keydownEvent.key) {\r\n        case this.KEY_PRESS_EVENTS.ARROW_DOWN:\r\n          // TODO: Add logic to iterate down the matching items\r\n          break;\r\n        case this.KEY_PRESS_EVENTS.ARROW_UP:\r\n          // TODO: Add logic to iterate up the matching items\r\n          break;\r\n        case this.KEY_PRESS_EVENTS.ENTER:\r\n          // TODO: Add logic to select the current active matching item\r\n          break;\r\n      }\r\n    });\r\n\r\n    // Close the search items list when the User clicks outside of the search items list\r\n    this.renderer.listen(document, 'click', () => {\r\n      this.closeAutocompleteList();\r\n    });\r\n  }\r\n\r\n  public filterItems(itemTextInputEvent: InputEvent): void {\r\n    const itemSearchTerm: string = (itemTextInputEvent.target as HTMLInputElement).value;\r\n\r\n    // Remove any previous search results\r\n    this.closeAutocompleteList();\r\n\r\n    if (itemSearchTerm === '') {\r\n      this.autoCompleteSelected.emit('');\r\n      return;\r\n    }\r\n\r\n    // Create a DIV to contain the matching search items\r\n    const autocompleteListDiv = this.renderer.createElement('DIV');\r\n    this.renderer.setAttribute(autocompleteListDiv, 'id', `${this.autoCompleteInput.nativeElement.id}-autocomplete-list`);\r\n    this.renderer.setAttribute(autocompleteListDiv, 'class', 'autocomplete-items');\r\n\r\n    // Add the DIV as a child of the autocomplete's input\r\n    this.renderer.appendChild(this.autoCompleteInput.nativeElement, autocompleteListDiv);\r\n\r\n    // Find the items that start with the search phrase from those in the list and remove any duplicates\r\n    const matchedItems = this.searchItems.filter((itemName: AutocompleteItem) =>\r\n      itemName.name.toLowerCase().startsWith(itemSearchTerm.toLowerCase())).sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n    // Remove any duplicates\r\n    const distinctMatchedItems = [... new Set(matchedItems.map((item) => item.name))].map((distinctItem: string)=>{\r\n      return { name : distinctItem } as AutocompleteItem;\r\n    });\r\n\r\n    // Create a DIV element for each matching item\r\n    distinctMatchedItems.forEach((matchedItem: AutocompleteItem) => {\r\n      // Create a DIV element for each matching item\r\n      const matchedItemElement = this.renderer.createElement('DIV');\r\n\r\n      // Highlight matching item with search term\r\n      this.renderer.setProperty(matchedItemElement, 'innerHTML',\r\n        `<strong>${matchedItem.name.substring(0, itemSearchTerm.length)}</strong>${matchedItem.name.substring(itemSearchTerm.length)}` +\r\n        `<input type=\"hidden\" value=\"${matchedItem}\"></input>`);\r\n\r\n      // Add the search value to the text input when it is clicked on\r\n      this.renderer.listen(matchedItemElement, 'click', (matchedItemEvent: PointerEvent) => {\r\n        (itemTextInputEvent.target as HTMLInputElement).value = (matchedItemEvent.target as HTMLInputElement).innerText;\r\n        this.autoCompleteSelected.emit((matchedItemEvent.target as HTMLInputElement).innerText);\r\n        this.closeAutocompleteList();\r\n      });\r\n      // Add the matched item to the auto complete list\r\n      this.renderer.appendChild(autocompleteListDiv, matchedItemElement);\r\n    });\r\n\r\n    // Add the auto complete list to the containing div of the auto complete input\r\n    this.renderer.appendChild(this.autoCompleteInput.nativeElement.parentNode, autocompleteListDiv);\r\n  }\r\n\r\n  private closeAutocompleteList(): void {\r\n    const autoCompleteSearchResultElement = document.getElementById(`${this.autoCompleteInput.nativeElement.id}-autocomplete-list`);\r\n    if (autoCompleteSearchResultElement) {\r\n      this.renderer.removeChild(this.autoCompleteInput.nativeElement.parentNode, autoCompleteSearchResultElement);\r\n    }\r\n  }\r\n}\r\n","<div class=\"autocomplete\">\r\n  <input\r\n    #autocompleteinput\r\n    type=\"text\"\r\n    [name]=\"autoCompleteItemName\"\r\n    [placeholder]=\"autoCompleteItemPlaceholder\"\r\n    (input)=\"filterItems($event)\">\r\n</div>\r\n","/*\r\n * Public API Surface of ngx-sp-ui-autocomplete\r\n */\r\n\r\nexport * from './lib/ngx-sp-ui-autocomplete.component';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}